{"ast":null,"code":"var _jsxFileName = \"/Users/michal/Desktop/new-app/new-app/src/components/modal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Fragment } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Modal = props => {\n  _s();\n\n  const [editFormData, setEditFormData] = useState({\n    title: \"\",\n    textContent: \"\",\n    currentDate: \"\"\n  });\n  const [editContactId, setEditContactId] = useState(null);\n\n  const handleAddFormChange = event => {\n    event.preventDefault();\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n    const newFormData = { ...addFormData\n    };\n    newFormData[fieldName] = fieldValue;\n    setAddFormData(newFormData);\n  };\n\n  const handleEditFormChange = event => {\n    event.preventDefault();\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n    const newFormData = { ...editFormData\n    };\n    newFormData[fieldName] = fieldValue;\n    setEditFormData(newFormData);\n  };\n\n  const handleAddFormSubmit = event => {\n    event.preventDefault();\n    const newContact = {\n      id: nanoid(),\n      title: addFormData.title,\n      textContent: addFormData.textContent,\n      currentDate: addFormData.currentDate\n    };\n    const newContacts = [...contacts, newContact];\n    setContacts(newContacts);\n    const firstInput = document.getElementsByClassName('firstInput');\n    console.log(firstInput);\n    firstInput.value = '';\n  };\n\n  const handleEditFormSubmit = event => {\n    event.preventDefault();\n    const editedContact = {\n      id: editContactId,\n      title: editFormData.title,\n      textContent: editFormData.textContent,\n      currentDate: editFormData.currentDate\n    };\n    const newContacts = [...contacts];\n    const index = contacts.findIndex(contact => contact.id === editContactId);\n    newContacts[index] = editedContact;\n    setContacts(newContacts);\n    setEditContactId(null);\n  };\n\n  const handleEditClick = (event, contact) => {\n    event.preventDefault();\n    setEditContactId(contact.id);\n    const formValues = {\n      title: contact.title,\n      textContent: contact.textContent,\n      currentDate: contact.currentDate\n    };\n    setEditFormData(formValues);\n  };\n\n  const handleCancelClick = () => {\n    setEditContactId(null);\n  };\n\n  const handleDeleteClick = contactId => {\n    const newContacts = [...contacts];\n    const index = contacts.findIndex(contact => contact.id === contactId);\n    newContacts.splice(index, 1);\n    setContacts(newContacts);\n  };\n\n  if (!props.show) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"modal-title\",\n            children: \"Modal-title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-body\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"firstInput\",\n            onSubmit: handleAddFormSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"title\",\n              required: \"required\",\n              minlength: \"3\",\n              maxLength: \"250\",\n              placeholder: \"Tytu\\u0142\",\n              onChange: handleAddFormChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"textContent\",\n              required: \"required\",\n              placeholder: \"Wiadomo\\u015B\\u0107\",\n              onChange: handleAddFormChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-footer\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: props.onClose,\n            className: \"button\",\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            children: \"Dodaj\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Modal, \"KJAhkhJJgHGokxTBic+A8fNNavI=\");\n\n_c = Modal;\nexport default Modal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["/Users/michal/Desktop/new-app/new-app/src/components/modal.js"],"names":["React","useState","Fragment","nanoid","Modal","props","editFormData","setEditFormData","title","textContent","currentDate","editContactId","setEditContactId","handleAddFormChange","event","preventDefault","fieldName","target","getAttribute","fieldValue","value","newFormData","addFormData","setAddFormData","handleEditFormChange","handleAddFormSubmit","newContact","id","newContacts","contacts","setContacts","firstInput","document","getElementsByClassName","console","log","handleEditFormSubmit","editedContact","index","findIndex","contact","handleEditClick","formValues","handleCancelClick","handleDeleteClick","contactId","splice","show","onClose"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from \"react\";\nimport { nanoid } from \"nanoid\";\n\n\n\nconst Modal = props => {\n  \n  \n\n  const [editFormData, setEditFormData] = useState({\n    title: \"\",\n    textContent: \"\",\n    currentDate: \"\",\n    \n  });\n\n  \n\n  const [editContactId, setEditContactId] = useState(null);\n\n  const handleAddFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...addFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setAddFormData(newFormData);\n\n    \n\n    \n  };\n\n  const handleEditFormChange = (event) => {\n    event.preventDefault();\n\n    const fieldName = event.target.getAttribute(\"name\");\n    const fieldValue = event.target.value;\n\n    const newFormData = { ...editFormData };\n    newFormData[fieldName] = fieldValue;\n\n    setEditFormData(newFormData);\n  };\n\n  const handleAddFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      title: addFormData.title,\n      textContent: addFormData.textContent,\n      currentDate: addFormData.currentDate,\n      \n    };\n\n    const newContacts = [...contacts, newContact];\n    setContacts(newContacts);\n    \n    const firstInput = document.getElementsByClassName('firstInput');\n    console.log(firstInput)\n    firstInput.value = '';\n  };\n\n  const handleEditFormSubmit = (event) => {\n    event.preventDefault();\n\n    const editedContact = {\n      id: editContactId,\n      title: editFormData.title,\n      textContent: editFormData.textContent,\n      currentDate: editFormData.currentDate,\n      \n    };\n\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === editContactId);\n\n    newContacts[index] = editedContact;\n\n    setContacts(newContacts);\n    setEditContactId(null);\n\n    \n  };\n\n  const handleEditClick = (event, contact) => {\n    event.preventDefault();\n    setEditContactId(contact.id);\n\n    const formValues = {\n      title: contact.title,\n      textContent: contact.textContent,\n      currentDate: contact.currentDate,\n      \n    };\n\n    setEditFormData(formValues);\n  };\n\n  const handleCancelClick = () => {\n    setEditContactId(null);\n  };\n\n  const handleDeleteClick = (contactId) => {\n    const newContacts = [...contacts];\n\n    const index = contacts.findIndex((contact) => contact.id === contactId);\n\n    newContacts.splice(index, 1);\n\n    setContacts(newContacts);\n  };\n\n    if (!props.show) {\n        return null\n    }\n    return (\n        <div className=\"modal\">\n            <div className=\"modal\">\n            <div className=\"modal-content\">\n            <div className=\"modal-header\">\n                <h4 className=\"modal-title\">Modal-title</h4>\n            </div>\n            <div className=\"modal-body\">\n            <form  className=\"firstInput\" onSubmit={handleAddFormSubmit}>\n        <input \n          type=\"text\"\n          name=\"title\"\n          required=\"required\"\n          minlength = \"3\"\n          maxLength= \"250\"\n          placeholder=\"Tytuł\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"text\"\n          name=\"textContent\"\n          required=\"required\"\n          placeholder=\"Wiadomość\"\n          onChange={handleAddFormChange}\n        />\n        \n        \n        \n        \n      </form>\n            </div>\n            <div className=\"modal-footer\">\n                <button onClick={props.onClose} className=\"button\">Close</button>\n                <button className=\"button\">Dodaj</button>\n            </div>\n            </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Modal"]},"metadata":{},"sourceType":"module"}